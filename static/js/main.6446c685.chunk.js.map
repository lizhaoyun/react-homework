{"version":3,"sources":["toDoList/Todoing.js","toDoList/Toinput.js","Context/Context.js","toDoList/ToDoList.js","Request.js","Context/Child.js","Context/Parent.js","Hoc/Hoc.js","Portal/Portal.js","Portal/ParentProtal.js","Sider.js","NoMatch.js","Router/Content.js","Appl.js","List/ListDoing.js","List/ListInput.js","List/List.js","index.js"],"names":["Todoing","idx","e","console","log","this","props","del","dol","change","map","item","JSON","parse","done","type","key","title","onClick","Component","Toinput","handleInput","keyCode","target","value","add","handleChange","setState","inputValue","bind","onKeyDown","con2","React","createContext","Child","context","contextType","Parent","state","time","Date","toLocaleString","timeId","setInterval","clearInterval","url","hoc","Com","Fetch","data","fetch","method","then","res","json","result","displayName","name","Music","Music2","MyMusic","MyMusic2","Hoc","a","b","Portal","handleClick","ReactDOM","createPortal","document","body","Sider","style","float","clock","activeStyle","background","color","to","pathname","id","search","NoMatch","Content","children","Listdoing","flag","undo","doing","className","length","Math","random","readOnly","checked","ListInput","List","addItem","localStorage","setItem","stringify","delItem","event","removeItem","splice","indexOf","changeItem","text","changeFlag","oldoing","getItem","oldone","objdoing","objdone","render","getElementById"],"mappings":"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","file":"static/js/main.6446c685.chunk.js","sourcesContent":["import React,{Component}from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Todoing extends Component{\r\n\r\n    delItem(idx,e){\r\n        console.log(e);\r\n        this.props.del(idx,e);\r\n    }\r\n    render() {\r\n        var {dol,del,change} = this.props;\r\n        return (\r\n             <div>\r\n                 <h2>正在进行</h2>\r\n                {   //里面是一个值,非语句\r\n                    dol.map((item)=>{\r\n                        if(JSON.parse(item).done===false){\r\n                            return <div><input type=\"checkbox\"  key={JSON.parse(item).title} onClick={(e)=>{change(JSON.parse(item).title,e)}}/>{JSON.parse(item).title}----<button onClick={(e)=>{del(JSON.parse(item).title,e)}}>删除</button></div>                      \r\n\r\n                        }\r\n                        // return <li key={idx}>{item}----<button onClick={(e)=>{del(idx,e)}}>删除</button></li>\r\n                        // return <li key={idx}>{item}----<button onClick={this.delItem.bind(this,idx)}>删除</button></li>\r\n\r\n                    })\r\n                    // dol.filter((item)=>{\r\n                    //     return JSON.parse(item).done === true?\"\":<li><input type=\"checkbox\"  key={JSON.parse(item).title} onClick={(e)=>{change(JSON.parse(item).title,e)}}/>{JSON.parse(item).title}----<button onClick={(e)=>{del(JSON.parse(item).title,e)}}>删除</button></li>\r\n                    // })\r\n                }\r\n                <h2>已完成</h2>\r\n                {\r\n                    dol.map((item)=>{\r\n                        if(JSON.parse(item).done===true){\r\n                            return <div><input type=\"checkbox\"  key={JSON.parse(item).title} onClick={(e)=>{change(JSON.parse(item).title,e)}}/>{JSON.parse(item).title}----<button onClick={(e)=>{del(JSON.parse(item).title,e)}}>删除</button></div>   \r\n                        }\r\n                    })\r\n                    // dol.filter((item)=>{\r\n                    //     return JSON.parse(item).done === true?\"<li><input type='checkbox'  key={JSON.parse(item).title} onClick={(e)=>{change(JSON.parse(item).title,e)}}/>{JSON.parse(item).title}----<button onClick={(e)=>{del(JSON.parse(item).title,e)}}>删除</button></li>\":''\r\n                    // })\r\n                }\r\n                 \r\n             </div>\r\n        );\r\n    }\r\n}\r\n\r\nTodoing.propTypes={\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n}\r\n\r\n/**\r\n *  设置默认值\r\n */\r\n// Todoing.defaultProps={\r\n//     todo:[1,12,3]\r\n// }","import React, { Component } from 'react'\r\n\r\nexport default class Toinput extends Component {\r\n\r\n    /**\r\n    *  受控组件：\r\n    *      value值被react控制的表单元素\r\n    * \r\n    *   可实现获取表单元素的值(表单验证)/\r\n    */\r\n\r\n\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this); //bind将当前类的this，指向父类的this\r\n    }\r\n    // handleInput(e){  //自己声明的不会自动执行,并且拿不到this\r\n    //     if(e.keyCode === 13){   //按下回车的情况。 按照每个键对应的键值判断，是否为回车\r\n    //         console.log(e.target.value);  //e.target代表当前触发事件的input结点\r\n    //         this.props.add();\r\n    //     }\r\n    // }\r\n    // constructor(){\r\n    //     super();\r\n    //     this.handleInput=this.handleInput.bind(this);\r\n    //     // this.state={\r\n    //     //     a:\"\",\r\n    //     //     b:\"\",\r\n    //     //     c:\"\"\r\n    //     // }\r\n    // }\r\n    handleInput=(e)=>{  \r\n        //绑定this，事件处理函数写成箭头函数\r\n        if(e.keyCode === 13){\r\n            console.log(e.target.value);  \r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            inputValue:e.target.value\r\n            // [e.target.name]:parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    // componentDidMount(){\r\n\r\n    //     // this.a.focus();\r\n    //     // this.refs.b.focus();  //ref=“b”   时，字符串作为refs的属性名，属性值为当前ref所在的结点\r\n    // }\r\n    render() {\r\n        return (\r\n            // <ul className={this.state.b+this.state.c>10?\"box\":\"\"}>\r\n               <ul> \r\n                <input type='text' onKeyDown={(e)=>{this.handleInput(e)}}></input>\r\n                {/* <input ref={(inp)=>{this.a=inp}} name=\"a\" onChange={this.handleChange} value={this.state.a}  type='text' onKeyDown={this.handleInput}></input>\r\n                +\r\n                <input id=\"inm\" ref=\"b\" name=\"b\" onChange={this.handleChange} value={this.state.b}  type='text' onKeyDown={this.handleInput}></input>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c}  type='text' onKeyDown={this.handleInput}></input>                \r\n                =\r\n\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                <input type='text' name=\"d\" ref={(inp)=>{this.inp=inp}}></input>    */}\r\n                {/**\r\n                    ref方法将获取到的标签结点的引用赋给形参，可将次属性写在this上属性，别的地方可以直接访问该结点\r\n\r\n                    非受控组件：\r\n                    一次性处理表单元素的值，ref直接拿到结点\r\n                */}     \r\n                {/* <label htmlFor=\"inm\">请输入第一个数</label>\r\n                <button className=\"btn\" onClick={()=>{console.log(this.inp.value)}} style={{color:\"red\",fontSize:\"100px;\"}}>提交</button> */}\r\n            </ul>\r\n            // </ul>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n *  受控组件：\r\n *    1.给input小钱加value属性，赋值为state的值\r\n *    2.给input标签绑定onChange事件，\r\n *    在事件处理函数中setState\r\n *    3.一个事件处理函数控制多个表单元素时，\r\n *      给input标签加上name属性，时间处理函数中写：\r\n *      setState({[e.target.name]:e.target.value})\r\n */\r\n","import React from 'react';\r\n\r\n// export let {Provider,Consumer} = React.createContext();\r\nexport let con = React.createContext();\r\nexport let con2=React.createContext();\r\n","import React, { Component } from 'react';\r\nimport Todoing from './Todoing';\r\nimport Toinput from './Toinput';\r\nimport './todo.css';\r\n\r\nexport default class ToDoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[JSON.stringify({\"title\":1,done:false})]\r\n            // todo:[{\"title\":1,done:false},{\"title\":2,done:false},{\"title\":3,done:false}]\r\n\r\n        }\r\n\r\n         /**\r\n         *  深拷贝---浅拷贝\r\n         */\r\n        // var obj = {a:100,b:[1,2,3]};\r\n        // var obj1 ={c:300};\r\n        // // var o = obj;\r\n        // // var o = {...obj};\r\n        // // var o = JSON.parse(JSON.stringify(obj));\r\n        // var o = Object.assign(obj,obj1);        //合并。合并到谁身上就先写谁。\r\n        // // var o = Object.assign({},obj,obj1);  生成新的对象\r\n        // // o.b[0] = 200;   //obj内层依旧是浅拷贝。obj的b和o的b指向相同\r\n        // console.log(o === obj);     //true\r\n        // Object.keys(obj).forEach(item => {\r\n        //    console.log(item);\r\n        //    console.log(obj[item]); \r\n        // });\r\n\r\n    }\r\n    componentDidMount(){\r\n        this.setState({\r\n            todo:JSON.parse(localStorage.getItem(\"todo\"))\r\n        })\r\n    }\r\n    addItem=(data)=>{  //子组件向父组件传数据，应用父组件给子组件传函数实现\r\n        // console.log(data);\r\n        this.setState({\r\n            // todo:[...this.state.todo,data]\r\n            todo:[...this.state.todo,JSON.stringify({\"title\":data,done:false})]\r\n        },()=>{\r\n            localStorage.setItem(\"todo\",JSON.stringify(this.state.todo));\r\n        })\r\n        \r\n    }\r\n    delItem=(key,event)=>{\r\n\r\n    /**\r\n     *  1.不能直接改变或处理state，通过setState改变\r\n     *  2.setState是异步执行\r\n     */\r\n\r\n        // console.log(event.target);\r\n        // let todo = [...this.state.todo];\r\n        // todo.splice(key,1);  \r\n        // this.setState({\r\n        //     todo:todo\r\n        // },()=>{\r\n        //     console.log(this.state.todo);\r\n        // })\r\n\r\n        this.setState((state,props)=>{  //state拿到执行之前的值     props：拿到当前需要的props属性\r\n                let todo = [...this.state.todo];\r\n                todo.splice(key,1);   //可删除/添加任意一项\r\n                localStorage.removeItem(key);\r\n            return {\r\n                todo:todo\r\n                // todo:state.todo.filter((item,index)=>key!==index)  //过滤，符合条件的返回\r\n            }\r\n        },()=>{\r\n            localStorage.setItem(\"todo\",JSON.stringify(this.state.todo))\r\n        })\r\n    }\r\n\r\n    changeItem=(key,event)=>{\r\n        var list=JSON.parse(localStorage.getItem(\"todo\"));\r\n        for(var i=0;i<list.length;i++){\r\n            \r\n            if(JSON.parse(list[i]).title === key){\r\n                if(JSON.parse(list[i]).done === false){\r\n                    list[i] =JSON.stringify({\"title\":key,done:true});\r\n                }\r\n                else{\r\n                    list[i] =JSON.stringify({\"title\":key,done:false});\r\n                }\r\n                // JSON.parse(list[i]).done = true;\r\n                localStorage.setItem(\"todo\",JSON.stringify(list));\r\n                console.log(JSON.parse(list[i]).done);\r\n            }\r\n        }\r\n        // console.log(list);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toinput add={this.addItem}/>      \r\n                <Todoing dol={this.state.todo} del={this.delItem} change={this.changeItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Axios from \"axios\";          //没有用到，这句也会执行\r\n// import {fetch} from \"whatwg-fetch\";\r\n\r\nexport default class Request extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state=\r\n        {\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){//页面加载完成后执行\r\n        let url = 'https://api.apiopen.top/musicRankingsDetails?type=1';\r\n\r\n        //默认是get请求，可配置第二个参数，配置请求的\r\n        fetch(url,{method:'post'}).then((res)=>res.json())\r\n        .then((res)=>{\r\n            console.log(res);   //直接res.result获取数据\r\n            this.setState({\r\n                data: res.result\r\n            })\r\n        })\r\n        // Axios.get(\"https://api.apiopen.top/musicRankingsDetails?type=1\")\r\n        // .then((res)=>{\r\n        //     console.log(res);\r\n        //     this.setState({\r\n        //         data:res.data.result\r\n        //     })\r\n        // });\r\n    }\r\n    render(){\r\n        \r\n        return(\r\n            <div>\r\n                <h1>数据请求</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map((item,idx)=>{\r\n                            return <li key={idx}>\r\n                                        <p>歌名：{item.title}</p>\r\n                                        <p>作者：{item.author}</p>\r\n                                    </li>\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n// import {Consumer} from \"./Context\";\r\nimport {con2} from \"./Context\";\r\n\r\nexport default class Child extends Component {\r\n    render() {\r\n        console.log(this.context);  //系统默认内置属性\r\n        return (\r\n            <div>\r\n                <div>{this.context}</div>\r\n                Child组件\r\n                {\r\n                    // <con.Consumer>\r\n                    //     {\r\n                    //         (id)=><div>{id}</div>\r\n                            \r\n                    //     }\r\n                    // </con.Consumer>\r\n                }\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nChild.contextType=con2;\r\n","import React, { Component } from 'react';\r\nimport Child from \"./Child\";\r\n\r\nexport default class Parent extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            time:new Date().toLocaleString()\r\n        }\r\n    }\r\n    componentDidMount(){\r\n\r\n        this.timeId=setInterval(() => {\r\n            console.log(123);\r\n            this.setState({\r\n                time:new Date().toLocaleString()\r\n            })\r\n        }, 1000);\r\n    }\r\n    componentWillUnmount(){ //关闭组件的时候执行\r\n        clearInterval(this.timeId);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.state.time}</h1>\r\n                Parent组件\r\n                <Child />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\n\r\nlet url = 'https://api.apiopen.top/musicRankingsDetails?type=1';\r\n\r\nfunction getDisplayName(Com){\r\n    return Com.displayName || Com.name || 'Component';\r\n}   //多层高阶组件嵌套\r\n\r\nfunction hoc(Com,url){  //Com是传入的某一个组件，相当于子组件\r\n    class Fetch extends Component{  //相当于父组件\r\n        constructor(){\r\n            super();\r\n            this.state=\r\n            {\r\n                data:[]\r\n            }\r\n        }\r\n        componentDidMount(){//页面加载完成后执行\r\n            fetch(url,{method:'post'}).then((res)=>res.json())\r\n            .then((res)=>{\r\n                console.log(res);   //直接res.result获取数据\r\n                this.setState({\r\n                    data: res.result\r\n                })\r\n            })\r\n        }\r\n        render(){\r\n            return <Com {...this.props} data={this.state.data}/>\r\n            // 把MyMusic传进的属性均拿到，并且以合适的方式添加到该标签上，传给子组件\r\n        }\r\n    }\r\n    Fetch.displayName =`Fetch(${Com.name})`;\r\n    return Fetch;\r\n}\r\n\r\nclass Music extends Component{\r\n    render(){\r\n        return (\r\n            <ul>\r\n                {\r\n                    this.props.data.map((item,idx)=>{       //data和Com标签属性对应\r\n                        return <li key={idx}>{item.title}</li>\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nclass Music2 extends Component{\r\n    render(){\r\n        return (\r\n            <ul>\r\n                {\r\n                    this.props.data.map((item,idx)=>{       //data和Com标签属性对应\r\n                        return <p key={idx}>{item.title}</p>\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nlet MyMusic = hoc(Music,url);\r\nlet MyMusic2 = hoc(Music2,url);\r\n\r\n\r\nexport default class Hoc extends Component {\r\n    render() {\r\n        console.log(this);\r\n\r\n        return (\r\n            <div>\r\n                <MyMusic a=\"2\" b=\"sd\"/>\r\n                <MyMusic2/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ReactDOM from \"react-dom\"\r\n\r\n/**\r\n *  弹框\r\n *  不在当前组件，在其他组件添加内容\r\n */\r\nexport default class Portal extends Component {\r\n\r\n    handleClick=()=>{\r\n        console.log(\"protalClick\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            ReactDOM.createPortal(\r\n                <div>\r\n                    <h1 onClick={this.handleClick}>Portal</h1>\r\n                </div>,\r\n                document.body\r\n            )\r\n            \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Protal from \"./Portal\"\r\n\r\nexport default class ParentProtal extends Component {\r\n\r\n    handleClick=()=>{\r\n        console.log(\"ParentClick\");\r\n    }\r\n    /**\r\n     *      按照组件嵌套的顺序进行事件冒泡\r\n     */\r\n\r\n    render() {\r\n        return (\r\n            <div onClick={this.handleClick}>\r\n                <Protal />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Link,NavLink} from \"react-router-dom\"\r\nimport {Button} from \"antd\"\r\n\r\nexport default class Sider extends Component {\r\n    render() {\r\n        let style = {float:'left'}\r\n        return (\r\n            <ul style={style}>\r\n                <Button type=\"primary\" clock>按钮</Button>\r\n                <li>\r\n                    {/* <Link to=\"/hoc\">Hoc</Link> */}\r\n                    {/* <Link to={{pathname:\"/hoc\",state:{id:100},search:'?user=zhang'}}>Hoc</Link> */}\r\n                    {/* <Link to={{pathname:\"/hoc\",state:{id:100},search:'?user=zhang'}}>Hoc</Link> */}\r\n                    <NavLink activeStyle={{background:\"blue\",color:\"pink\"}} to={{pathname:\"/hoc\",state:{id:100},search:'?user=zhang'}}>Hoc</NavLink>\r\n                    {/* activeStyle:被选中时添加的样式 */}\r\n\r\n                </li>\r\n                <li>\r\n                    {/* <Link to=\"/parent\">Parent</Link> */}\r\n                    <NavLink activeStyle={{background:\"blue\",color:\"pink\"}} to=\"/parent\">Parent</NavLink>\r\n\r\n                </li>\r\n                {\r\n                    [0,1,2,3,4].map((item)=>{\r\n                        return (\r\n                            <li key={item}>\r\n                                <NavLink activeStyle={{background:\"blue\",color:\"pink\"}} to={'/content/'+item} >帖子{item}</NavLink>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function NoMatch(){\r\n    // return值应为jss表达式\r\n    return <h1>你的页面飞走了</h1>\r\n}","import React from 'react'\r\n\r\n//无状态组件        函数组件\r\nexport default function Content(props){\r\n    console.log(props);\r\n    return(\r\n        <div>\r\n            {props.children}\r\n            {/* 内容为直接使用标签(非路由调用)时，标签内嵌套的内容. */}\r\n\r\n            Content\r\n            {/* Content{props.match.params.id} */}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport {BrowserRouter as Router,Route,Link,Switch,Redirect} from \"react-router-dom\"\r\nimport Hoc from './Hoc/Hoc'\r\nimport Parent from './Context/Parent'\r\nimport Sider from './Sider'\r\nimport NoMatch from './NoMatch'\r\nimport Content from './Router/Content'\r\n\r\nexport default class Appl extends Component {\r\n    render() {\r\n        /**\r\n         *      最终只匹配一个route\r\n         *      <Router>标签最终不显示。标签内只能有一个子节点\r\n         */\r\n        return (\r\n            // basename设置目录路径路由，保证在该文件夹下的内容可直接被找到，否则会直接去根目录找\r\n            <Router basename=\"/build\">\r\n                <div>\r\n                    <Content>\r\n                        <h2>content</h2>\r\n                        <ul>\r\n                            <li>sd</li>\r\n                        </ul>\r\n                    </Content>\r\n                    <Sider/>\r\n                    <div style={{float:'left',border:'2px solid red',marginLeft:100}}>\r\n                       \r\n                        {/* <Route path=\"/hoc\" component={Hoc}/> */}\r\n                        {/* <Route path=\"/hoc\" render={()=><h1>Render 方法</h1>}/> */}\r\n                        {/* <Router exact path=\"/\"> <Hoc/> </Router> */}\r\n                        {/* <Route path=\"/parent\" component={Parent}/>\r\n                        <Route path=\"/hoc\">\r\n                            <Hoc/>\r\n                        </Route> */}\r\n                        <Switch>\r\n                            {/* 非严格模式下，会匹配路径包含的所有情况。/parent路径会匹配/、parent */}\r\n                            <Route path=\"/hoc\" component={Hoc}/>\r\n                            {/* <Route exact path=\"/\"><Hoc/></Route> */}\r\n                            <Route path=\"/parent\" component={Parent}/>\r\n                            {/* <Route path=\"/hoc\">\r\n                                <Hoc/>\r\n                            </Route> */}\r\n\r\n                            {/* <Redirect from='/old' to='/hoc'/> */}\r\n                            {/* 路径重定向 :访问原来路径时，会直接跳转到设定的hoc链接上。*/}\r\n\r\n                            <Route path=\"/old\" render={(props)=><Redirect to='/hoc'/>}/>\r\n                            <Route path=\"/content/:id\" component={Content}/>\r\n                            <Route>\r\n                                <NoMatch/>\r\n                                {/* \r\n                                    任何路径都可以匹配到\r\n                                    位置必须在最后写\r\n                                */}\r\n                            </Route>\r\n                        </Switch>\r\n                    </div>\r\n                   \r\n                </div>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n","import React,{Component}from 'react';\r\nimport \"./list.css\";\r\n\r\nexport default class Listdoing extends Component{\r\n\r\n    delItem(item,e,flag,undo){\r\n        \r\n        this.props.del(item,e,flag,undo);\r\n    }\r\n    \r\n    render() {\r\n        var {del,change,doing,done} = this.props;\r\n        // console.log(doing.length===0?\"0\":doing.length);\r\n        return (\r\n             <ul className=\"biglist\">\r\n                 <h2>正在进行<span>{doing.length}</span></h2> \r\n                 \r\n                {   \r\n                    doing.map((item)=>{\r\n                            return <li key={item+Math.random()}><input type=\"checkbox\" onClick={(e)=>{change(item,e,false)}}/>{item}<button onClick={(e)=>{del(item,e,false,true)}}>删除</button></li>                      \r\n                    })\r\n                }\r\n                <h2 className=\"done\">已完成 <span>{done.length}</span></h2>\r\n                \r\n                {\r\n                    done.map((item)=>{\r\n                            return <li key={item+Math.random()}><input type=\"checkbox\" readOnly={true} checked=\"checked\" onClick={(e)=>{change(item,e,true)}}/>{item}<button onClick={(e)=>{del(item,e,true,true)}}>删除</button></li>   \r\n                        }\r\n                    )\r\n                    \r\n                }\r\n                 \r\n             </ul>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport \"./list.css\"\r\nexport default class ListInput extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this); //bind将当前类的this，指向父类的this\r\n    }\r\n    handleInput=(e)=>{  \r\n        //绑定this，事件处理函数写成箭头函数\r\n        if(e.keyCode === 13){\r\n            // console.log(e.target.value);  \r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            inputValue:e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            // <ul className={this.state.b+this.state.c>10?\"box\":\"\"}>\r\n               <div> \r\n                <span>ToDOList</span><input className=\"getin\" type='text' onKeyDown={(e)=>{this.handleInput(e)}}></input>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ListDoing from './ListDoing';\r\nimport ListInput from './ListInput';\r\nimport { stat } from 'fs';\r\n// import './todo.css';\r\n\r\nexport default class List extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            // todo:[],\r\n            doing:[],\r\n            done:[]\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        let oldoing =localStorage.getItem(\"doing\");\r\n        let oldone = localStorage.getItem(\"done\");\r\n        let objdoing = JSON.parse(oldoing);\r\n        let objdone = JSON.parse(oldone);\r\n        this.setState((state)=>{\r\n            if(objdone===null){\r\n                localStorage.setItem(\"done\",JSON.stringify(state.done));               \r\n            }\r\n            if(objdoing===null){\r\n                localStorage.setItem(\"doing\",JSON.stringify(state.doing));\r\n            }\r\n            if(objdone!==null&&objdoing!==null){\r\n                return {\r\n                    doing:objdoing,\r\n                    done:objdone\r\n                } \r\n            }\r\n            \r\n            \r\n            \r\n        })\r\n        \r\n    }\r\n\r\n    addItem=(data)=>{  //子组件向父组件传数据，应用父组件给子组件传函数实现\r\n        // console.log(data);\r\n        this.setState((state)=>{\r\n            // todo:[...this.state.todo,data],\r\n            let doing = [...state.doing,data];\r\n            console.log(\"add:\"+doing);\r\n            return{\r\n                doing:doing\r\n            }\r\n        },()=>{\r\n            // localStorage.setItem(\"todo\",JSON.stringify(this.state.todo));\r\n            localStorage.setItem(\"doing\",JSON.stringify(this.state.doing));\r\n\r\n        })\r\n        \r\n    }\r\n    delItem=(item,event,flag,undo)=>{\r\n        this.setState((state)=>{\r\n                let doing =[...state.doing];\r\n                let done=[...state.done];\r\n                if(undo){\r\n                    localStorage.removeItem(item);\r\n                }\r\n                if(flag){\r\n                    done.splice(done.indexOf(item),1);\r\n                    return {\r\n                        done:done\r\n                    }\r\n                }else{\r\n                    doing.splice(doing.indexOf(item),1);\r\n                    return {\r\n                        doing:doing\r\n                    }\r\n                }\r\n        },()=>{\r\n            localStorage.setItem(\"doing\",JSON.stringify(this.state.doing));\r\n            localStorage.setItem(\"done\",JSON.stringify(this.state.done));\r\n\r\n\r\n        })\r\n    }\r\n\r\n    changeItem=(text,event,changeFlag)=>{\r\n        if(changeFlag){\r\n            this.delItem(text,event,true,false);\r\n\r\n            this.setState((state)=>{\r\n                let adddo=[...state.doing,text];\r\n                return {\r\n                    doing:adddo\r\n                }\r\n\r\n            })\r\n            localStorage.setItem(\"done\",JSON.stringify(this.state.done));\r\n        }\r\n        else{\r\n            this.delItem(text,event,false,false);\r\n            this.setState((state)=>{\r\n                let adone=[...state.done,text];\r\n\r\n                return {\r\n                    done:adone\r\n                }\r\n\r\n            })\r\n            localStorage.setItem(\"doing\",JSON.stringify(this.state.doing));\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ListInput add={this.addItem}/>      \r\n                <ListDoing del={this.delItem} change={this.changeItem} done={this.state.done} doing={this.state.doing}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// import React from 'react';\nimport React,{Fragment,Component}from 'react';    //直接引入Fragment。\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import ShowTime from \"./ShowTime.js\";\nimport ToDoList from './toDoList/ToDoList';\n// import App from './App';\nimport Request from \"./Request\";\nimport Parent from \"./Context/Parent\";\n// import {Provider} from \"./Context/Context\";\nimport {con, con2} from \"./Context/Context\";\nimport Hoc from \"./Hoc/Hoc\";\nimport Portal from \"./Portal/Portal\";\nimport ParentProtal from \"./Portal/ParentProtal\"\nimport Appl from \"./Appl\"\nimport List from \"./List/List\"\n\n\n// ReactDOM.render(<ToDoList/>,document.getElementById('root'));\nReactDOM.render(<List/>,document.getElementById('root'));\n\n// ReactDOM.render(<Request/>,document.getElementById('root'));\n\n/**\n * Context:\n *   1.生成Context，可写在一个js文件中，export导出\n *   2.在根组件(或需要传数据的地方)import Provider，并配置Provider，加上value属性\n *   3.在需要获取数的组件import Consumer，并配置Consumer\n *   Consumer组件里是个函数，函数的参数是传过来的value值\n */\n// let id=125;\n// ReactDOM.render(\n//     // <Provider value={id}>\n//     //     <Parent />\n//     // </Provider>\n//     <con.Provider value={id}>\n//         <div>\n//         </div>\n//         <con2.Provider value='sdaf'></con2.Provider>\n//         <Parent />\n\n//     </con.Provider>\n//     ,document.getElementById('root'));\n\n\n// ReactDOM.render(<Hoc/>,document.getElementById(\"root\"));\n// ReactDOM.render(<ParentProtal />,document.getElementById(\"root\"));\n// ReactDOM.render(<Appl />,document.getElementById(\"root\"));\n\n\n\n/**\n *  10-9 ch02\n */\n\n//显示当前系统时间\n// function show(){\n//     //只会渲染不一样的地方。\n//     var ele = <div>{new Date().toLocaleString()}</div>; //一旦创建，属性不可改变\n//     ReactDOM.render(ele,document.querySelector('#root'));\n// }\n//setInterval(show,1000)        将函数体交给setInterval循环执行； show()：将返回值给setInterval，循环执行\n// setInterval(()=>{\n//     show();\n// },1000);\n\n    /**\n     *      组件\n     */\n//1.函数定义组件    函数名首字母大写\n// var num = 20;\n// function ShowTime(props){   //参数为只读,是个对象\n//     return (        //返回内容多时加(),返回的只能是一个元素(一个闭合标签)，内容多时拼成一个返回\n//         // <div>\n//         //     <div>{props.name}{props.age}</div>\n//         //     <div>{new Date().toLocaleString()}</div>\n//         // </div>\n\n//         /**\n//          *  <React.Fragment></> 仅起到包裹作用，不添加到DOM结构中\n//          */\n//         //直接引入fragment后，可写为<Fragment></Fragment>\n//         <Fragment>      \n//             <div>{props.name}{props.age}</div>\n//             <div>{new Date().toLocaleString()}</div>\n//         </Fragment>\n        \n//     )\n// }\nvar num=[1,2,3];\n\n//2.用类定义组件      尽量少用类\n\n// ReactDOM.render(<ShowTime name=\"zhang\" age={num}/>,document.getElementById('root'));   //以标签的形式调用组件\n/**\n *  组件交互\n *  父组件->子组件：调用子组件时添加属性，子组件通过props(函数为props，类为this.props)拿到传递的\n *  子组件->父组件\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n// var str = 'react';\n// var obj={\n//     type:\"div\",\n//     props:{\n//         class:\"hi\",\n//         children:[  //描述react标签的内容\n//             'hello',\n//             'react',\n//             {\n//                 type:\"h1\",\n//                 props:{\n//                     class:\"pp\",\n//                     children:[  //描述react标签的内容\n//                         'title',\n//                         'react',\n//                         'dsjakfnkj',\n//                         {\n//                             type:\"h5\",\n//                             props:{\n//                                 class:\"yy\",\n//                                 children:[  //描述react标签的内容\n//                                     'I',\n//                                     'up',\n//                                     '❤',\n//                                 ]\n//                             }\n//                         }\n//                     ]\n//                 }\n//             }\n//         ]\n//     }\n// }\n// var ele = <h1 class=\"hi\">hello {str}</h1>      //遇到 < 会把后面的内容转化为对象\n\n// var ele = React.createElement(\n//     \"h1\",{id:'hh',class:'pp'},'hello',\n//     React.createElement(\"p\",{id:'hh',class:'pp'},'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));      //ele实际传入的是对象\n\n\n//自己封装render(渲染函数)\n// function render(obj,container){\n//     var {type,props} = obj;\n\n//     /**\n//      *  文档碎片    存在内存中的变量。类似虚拟的dom结点。多次dom操作保存，最后一次渲染。\n//      *  \n//      *  页面重绘(repaint)：除引起回流的事件外，如：颜色变化(背景色、字体颜色、边框颜色)\n//      *  页面回流(重排reflow)：dom结构变化、内容变化、大小、位置变化会引起       代价大，浏览器会执行一些操作\n//      * \n//      *  回流一定会引起重绘\n//      */\n\n//     //原因： 页面展现过程\n//     /**\n//      *  请求HTML页面，浏览器HTML解析器会解析html文件，生成dom树\n//      *  link引入css文件，css解析器解析css，生成css对象模型(css规则)--CSSOM,\n//      *  CSSOM和DOM树结合生成一个render tree(渲染树)--最终呈现的内容，\n//      *  最后浏览器会绘制页面进行呈现\n//      */\n//     var fragment = document.createDocumentFragment();\n\n\n//     var ele = document.createElement(type); //虚拟dom\n//     for (var key in props) {\n//         if(key === 'class'){\n//             ele.className = props[key];\n//         }else if(key === 'children'){   //children是子元素，不在其属性上\n//             for(var i=0;i<props.children.length;i++){\n//                 if(typeof props.children[i] === 'object'){\n//                     render(props.children[i],ele);\n//                 }else{\n//                     var txt = document.createTextNode(props.children[i]);\n//                     ele.appendChild(txt);\n//                 }\n//             }\n//         }else{\n//             ele[key] = obj.props[key];    // . 访问，仅访问名字；[]访问\n//         }\n//     }\n//     fragment.appendChild(ele);\n//     container.appendChild(fragment);\n//     // container.appendChild(ele);\n// }\n\n// render(obj,document.getElementById('root'));\n\n/**\n * ------------------------- 性能提升-------------------\n */\n\n//1.先用变量进行dom处理，最后一次渲染\n// console.time('time');\n// var str ='';\n// var div = document.getElementById(\"root\");\n// for(var i=0;i<1000;i++){\n//     str += '<p>'+i+'</p>';\n// }\n// div.innerHTML +=str;\n// console.timeEnd(\"time\");\n\n\n//2.样式处理\n//在css中声明一个css类\n// var div =document.getElementById(\"root\");\n// div.style.width=\"100px\";\n// div.style.height = '100px';\n// div.style.backgroundColor=\"red\";\n/**\n *  .active{\n *      width:100px;\n *      height:100px;\n *      background:red;\n * }\n * div.className = 'active';\n */\n// div.className = 'active';\n\n\n//3.offsetLeft、offsetRight、offsetWidth、offsetHeight 等都会引起回流\n// var wid = div.offsetWidth;\n// setInterval(()=>{\n//     wid+=1;\n//     div.style.width = wid+\"px\";\n//     // div.style.width = (div.offsetWidth+1)+\"px\";\n// },1000)\n\n//4.文档碎片\n\n\n\n\n"],"sourceRoot":""}